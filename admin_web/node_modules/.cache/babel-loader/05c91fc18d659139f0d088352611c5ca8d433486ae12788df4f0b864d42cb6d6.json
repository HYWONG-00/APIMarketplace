{"ast":null,"code":"import { Client as Appwrite, Databases, Account } from \"appwrite\";\nimport { Server } from \"../appwrite/config\";\nlet api = {\n  sdk: null,\n  provider: () => {\n    if (api.sdk) {\n      return api.sdk;\n    }\n    let appwrite = new Appwrite();\n    appwrite.setEndpoint(Server.endpoint).setProject(Server.project);\n    const account = new Account(appwrite);\n    const database = new Databases(appwrite);\n    api.sdk = {\n      database,\n      account\n    };\n    return api.sdk;\n  },\n  createAccount: (email, password, name) => {\n    return api.provider().account.create(\"unique()\", email, password, name);\n  },\n  getAccount: () => {\n    let account = api.provider().account;\n    return account.get();\n  },\n  createSession: (email, password) => {\n    return api.provider().account.createEmailSession(email, password);\n  },\n  deleteCurrentSession: () => {\n    return api.provider().account.deleteSession(\"current\");\n  },\n  createDocument: (databaseId, collectionId, data) => {\n    return api.provider().database.createDocument(databaseId, collectionId, 'unique()', data);\n  },\n  listDocuments: (databaseId, collectionId, query) => {\n    return api.provider().database.listDocuments(databaseId, collectionId, query);\n  },\n  getDocument: (databaseId, collectionId, documentId) => {\n    return api.provider().database.getDocument(databaseId, collectionId, documentId);\n  },\n  updateDocument: (databaseId, collectionId, documentId, data) => {\n    return api.provider().database.updateDocument(databaseId, collectionId, documentId, data);\n  },\n  deleteDocument: (databaseId, collectionId, documentId) => {\n    return api.provider().database.deleteDocument(databaseId, collectionId, documentId);\n  }\n};\nexport default api;","map":{"version":3,"names":["Client","Appwrite","Databases","Account","Server","api","sdk","provider","appwrite","setEndpoint","endpoint","setProject","project","account","database","createAccount","email","password","name","create","getAccount","get","createSession","createEmailSession","deleteCurrentSession","deleteSession","createDocument","databaseId","collectionId","data","listDocuments","query","getDocument","documentId","updateDocument","deleteDocument"],"sources":["C:/Users/Wong Hui Ying/Downloads/cosmos_api/admin_web/src/appwrite/api.js"],"sourcesContent":["import { Client as Appwrite, Databases, Account } from \"appwrite\";\nimport { Server } from \"../appwrite/config\";\n\nlet api = {\n    sdk: null,\n  \n    provider: () => {\n      if (api.sdk) {\n        return api.sdk;\n      }\n      let appwrite = new Appwrite();\n      appwrite.setEndpoint(Server.endpoint).setProject(Server.project);\n      const account = new Account(appwrite);\n      const database = new Databases(appwrite);\n  \n      api.sdk = { database, account };\n      return api.sdk;\n    },\n  \n    createAccount: (email, password, name) => {\n      return api.provider().account.create(\"unique()\", email, password, name);\n    },\n  \n    getAccount: () => {\n      let account = api.provider().account;\n      return account.get();\n    },\n  \n    createSession: (email, password) => {\n      return api.provider().account.createEmailSession(email, password);\n    },\n  \n    deleteCurrentSession: () => {\n      return api.provider().account.deleteSession(\"current\");\n    },\n  \n    createDocument: (databaseId, collectionId, data) => {\n      return api\n        .provider()\n        .database.createDocument(databaseId, collectionId, 'unique()', data);\n    },\n  \n    listDocuments: (databaseId, collectionId, query) => {\n      return api.provider().database.listDocuments(databaseId, collectionId, query);\n    },\n\n    getDocument: (databaseId, collectionId, documentId) => {\n      return api.provider().database.getDocument(databaseId, collectionId, documentId);\n    },\n  \n    updateDocument: (databaseId, collectionId, documentId, data) => {\n      return api\n        .provider()\n        .database.updateDocument(databaseId, collectionId, documentId, data);\n    },\n  \n    deleteDocument: (databaseId, collectionId, documentId) => {\n      return api.provider().database.deleteDocument(databaseId, collectionId, documentId);\n    },\n  };\n  \n  export default api;"],"mappings":"AAAA,SAASA,MAAM,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,UAAU;AACjE,SAASC,MAAM,QAAQ,oBAAoB;AAE3C,IAAIC,GAAG,GAAG;EACNC,GAAG,EAAE,IAAI;EAETC,QAAQ,EAAEA,CAAA,KAAM;IACd,IAAIF,GAAG,CAACC,GAAG,EAAE;MACX,OAAOD,GAAG,CAACC,GAAG;IAChB;IACA,IAAIE,QAAQ,GAAG,IAAIP,QAAQ,CAAC,CAAC;IAC7BO,QAAQ,CAACC,WAAW,CAACL,MAAM,CAACM,QAAQ,CAAC,CAACC,UAAU,CAACP,MAAM,CAACQ,OAAO,CAAC;IAChE,MAAMC,OAAO,GAAG,IAAIV,OAAO,CAACK,QAAQ,CAAC;IACrC,MAAMM,QAAQ,GAAG,IAAIZ,SAAS,CAACM,QAAQ,CAAC;IAExCH,GAAG,CAACC,GAAG,GAAG;MAAEQ,QAAQ;MAAED;IAAQ,CAAC;IAC/B,OAAOR,GAAG,CAACC,GAAG;EAChB,CAAC;EAEDS,aAAa,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;IACxC,OAAOb,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACM,OAAO,CAACM,MAAM,CAAC,UAAU,EAAEH,KAAK,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACzE,CAAC;EAEDE,UAAU,EAAEA,CAAA,KAAM;IAChB,IAAIP,OAAO,GAAGR,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACM,OAAO;IACpC,OAAOA,OAAO,CAACQ,GAAG,CAAC,CAAC;EACtB,CAAC;EAEDC,aAAa,EAAEA,CAACN,KAAK,EAAEC,QAAQ,KAAK;IAClC,OAAOZ,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACM,OAAO,CAACU,kBAAkB,CAACP,KAAK,EAAEC,QAAQ,CAAC;EACnE,CAAC;EAEDO,oBAAoB,EAAEA,CAAA,KAAM;IAC1B,OAAOnB,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACM,OAAO,CAACY,aAAa,CAAC,SAAS,CAAC;EACxD,CAAC;EAEDC,cAAc,EAAEA,CAACC,UAAU,EAAEC,YAAY,EAAEC,IAAI,KAAK;IAClD,OAAOxB,GAAG,CACPE,QAAQ,CAAC,CAAC,CACVO,QAAQ,CAACY,cAAc,CAACC,UAAU,EAAEC,YAAY,EAAE,UAAU,EAAEC,IAAI,CAAC;EACxE,CAAC;EAEDC,aAAa,EAAEA,CAACH,UAAU,EAAEC,YAAY,EAAEG,KAAK,KAAK;IAClD,OAAO1B,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAACgB,aAAa,CAACH,UAAU,EAAEC,YAAY,EAAEG,KAAK,CAAC;EAC/E,CAAC;EAEDC,WAAW,EAAEA,CAACL,UAAU,EAAEC,YAAY,EAAEK,UAAU,KAAK;IACrD,OAAO5B,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAACkB,WAAW,CAACL,UAAU,EAAEC,YAAY,EAAEK,UAAU,CAAC;EAClF,CAAC;EAEDC,cAAc,EAAEA,CAACP,UAAU,EAAEC,YAAY,EAAEK,UAAU,EAAEJ,IAAI,KAAK;IAC9D,OAAOxB,GAAG,CACPE,QAAQ,CAAC,CAAC,CACVO,QAAQ,CAACoB,cAAc,CAACP,UAAU,EAAEC,YAAY,EAAEK,UAAU,EAAEJ,IAAI,CAAC;EACxE,CAAC;EAEDM,cAAc,EAAEA,CAACR,UAAU,EAAEC,YAAY,EAAEK,UAAU,KAAK;IACxD,OAAO5B,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAACqB,cAAc,CAACR,UAAU,EAAEC,YAAY,EAAEK,UAAU,CAAC;EACrF;AACF,CAAC;AAED,eAAe5B,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}